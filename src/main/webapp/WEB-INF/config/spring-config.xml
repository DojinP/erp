<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/images/**" location="/WEB-INF/static/images/" />
	<resources mapping="/common/css/**" location="/WEB-INF/static/common/css/" />
	<resources mapping="/common/js/**" location="/WEB-INF/static/common/js/" />
	<resources mapping="/upload/**" location="/WEB-INF/upload/" />
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"/>
	</beans:bean>
	
	<!-- ================= tiles 를 기반으로 뷰 정보를 만들어내는 ViewResolver ===================== -->
	<!-- 1. tiles 설정파일을 등록 -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/**/*-tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<!-- 2. tiles 기반으로 뷰를 만들 수 있도록 ViewResolver 등록 -->
	<beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<beans:property name="order" value="1"/>
	</beans:bean>
	
	<!-- *************************** Spring JDBC 연동을 위해 필요한 라이브러리 **************************** -->
	<!-- jdbc에서 DriverManager 방식으로 Connection 을 생성하여 관리
			=> 요청이 들어오면 Connection 을 생성하여 넘겨주는 방식 -->
<!--  	<beans:bean id="ds" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
		<beans:property name="url" value="jdbc:mysql://172.30.1.41/jdbc?serverTimezone=UTC" />
		<beans:property name="username" value="exam" />
		<beans:property name="password" value="exam" />
	</beans:bean>  -->
	
	<!-- 커넥션 풀 등록 -->
 	<beans:bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<beans:property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
		<beans:property name="jdbcUrl" value="jdbc:mysql://172.30.1.41/erp?serverTimezone=UTC" />
		<beans:property name="username" value="erp" />
		<beans:property name="password" value="erp" />
		<!-- <beans:property name="maximumPoolSize" value="20"/> -->
	</beans:bean>
	<beans:bean id="ds" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<!-- // hikariConfig injection -->
		<beans:constructor-arg ref="hikariConfig"/>
	</beans:bean>



	<!-- Spring 에서 DB연동 할 수 있는 CLRUD 메소드를 제공해주는 클래스 -->
	<beans:bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:constructor-arg ref="ds" />
	</beans:bean>
	
	
	<!-- ===================================== mybatis 를 사용하기 위한 설정 =========================================-->
	<!-- mybatis 내부에서 DataSource 를 통해 Connection 을 획득해서 관리하는 객체 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="ds" />
		<beans:property name="configLocation" value="/WEB-INF/config/mybatis-config.xml"/>
	</beans:bean>

	<!-- mybatis 의 핵심 클래스 (SQL 을 실행하기 위한 기능을 제공) -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory"/>
	</beans:bean>

	<!-- =============================================파일 업로드================================================== -->
	<beans:bean id="multipartResolver" 
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="4000000"/>	<!-- value는 바이트 단위 (4MB) -->
		<!-- <beans:property name="maxUploadSize" value="10000000"/> -->	<!-- value는 바이트 단위 (10MB) -->
	</beans:bean>
	
	<!-- ==================================== 인터셉터 ================================================= -->
	<interceptors>
		<!-- interceptor 엘리먼트 한 개에 인터셉터를 한 개 등록 -->
		<interceptor>
			<!-- mapping 엘리먼트에는 어떤 path로 요청하면 인터셉터를 실행할 것인지 등록 -->
			<!-- 모든 요청에 대해서 인터셉터를 거치도록 설정 -->
			<!-- <mapping path="/**/*"/> -->
			<!-- /board 로 시작하는 모든 요청에 대해서 인터셉터를 거쳐 실행되도록 설정 -->
			<mapping path="/board/**"/>
			<!-- /emp/mypage 로 들어로는 요청에 대해서 인터셉터를 거쳐 실행되도록 설정 -->
			<mapping path="/emp/mypage"/>
			<!-- 위에서 설정한 path에 해당되더라고 인터셉터를 거치지 않고 예외시킬 path를 등록 -->
			<exclude-mapping path="/board/download/**"/>
			<beans:bean class="com.multi.erp.etc.TimeCheckInterceptor"/>
		</interceptor>
		
		<interceptor>
			<mapping path="/**/*"/>
			<exclude-mapping path="/index.do"/>
			<exclude-mapping path="/emp/login.do"/>
			<exclude-mapping path="/emp/spring/login"/>
			<exclude-mapping path="/images/**"/>
			<exclude-mapping path="/board/list.do"/>
			<exclude-mapping path="/board/ajax/list.do"/>
			<beans:bean class="com.multi.erp.common.LoginCheckInterceptor"/>
		</interceptor>
	</interceptors>

	<!-- ========================================================================================================-->
	<!-- spring 컨테이너가 start 될 때 base-package에 명시된 패키지를 읽어서 컨트롤러를 객체로 생성 -->
	<!-- <context:component-scan base-package="com.multi.erp" /> -->
	<context:component-scan base-package="com" />
	<context:component-scan base-package="kr" />
	
	
</beans:beans>
